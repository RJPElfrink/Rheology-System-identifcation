%% test LPM with Schroeder Multisine

clear all
%close all
clc

%% load data

data = load('Matlab_input_multisine.mat');

%% variables and data

N = double(data.N);
r = double(data.r); rstd = std(r); rMax = 1.1*max(abs(r));
Ts = double(data.Ts);

fs = 1/Ts;
f0 = fs/N;
lines = 2:N/2-1; nLines = length(lines);
f= 0:f0:fs-f0;
t = 0:Ts:(N-1)*Ts;

%% Define phases

phaserand=2*pi*rand(nLines,1);

k = 1:nLines;
phasemulti = -k.*(k-1).*pi/nLines;

%% generate input


nUp = 20; % generate data oversampled such that simulation is accurate - otherwhise we have significant zoh effects with lsim simulation
tUp = 0:Ts/nUp:(nUp*N-1)*Ts/nUp;
R = zeros(N*nUp,1);

%select phaserand or phasemulti 
R(lines) = exp(1i*phaserand);
rUp = 2*real(ifft(R)); rUp = rstd*rUp/std(rUp); rUp=rUp.';
rTest=rUp;

% improve crest factor 
figure; plot(tUp,rUp);
for iter=1:10
rUp = min(rUp,rMax); rUp=max(rUp,-rMax);
Rtemp = fft(rUp);
R = zeros(N*nUp,1);
R(lines) = Rtemp(lines); R(lines) = R(lines)./abs(R(lines));
rUp = 2*real(ifft(R)); rUp = rstd*rUp/std(rUp); rUp=rUp.';
end
hold on; plot(tUp,rUp); title('Reference')
legend('not optimized','Crest optimized')

%% generate data

% g/(s+1/L). Waarbij g gelijk is aan 2.5 en L gelijk is aan 1.5

g = 2.5;
L = 1.5;
B = g;
A = [1 1/L];
sys = tf(B,A);
G0 = freqs(B,A,2*pi*f);
uUp = rUp;

yUp = lsim(sys,uUp,tUp); yUp=yUp';

% downsample data
u = uUp(1:nUp:end);
r = rUp(1:nUp:end);
r = rTest(1:nUp:end);
y = yUp(1:nUp:end);

%% LPM

data_multi = struct('u', [], 'y', [], 'r', [], 'N', [], 'Ts', [], 'ExcitedHarm', []);
data_multi.u = u;                             % row index is the input number; the column index the time instant (in samples) 
data_multi.y = y;                             % row index is the output number; the column index the time instant (in samples) 
data_multi.r = r;                             % one period of the reference signal is sufficient 
data_multi.N = N;                             % number of samples in one period 
data_multi.Ts = Ts;                           % sampling period 
data_multi.ExcitedHarm = lines-1;             % excited harmonics multisine excitation


method.order        =   2; %order of the local polynomial approximation (default 2) 
method.dof          =   1; %degrees of freedom of the (co-)variance estimates = equivalent number of 
%                                               independent experiments - 1 (default ny) 
method.transient    = 	1;%determines the estimation of the transient term (optional; default 1)  

[CZ_m, Z_m, freq_m, G_m, CvecG_m, dof_m, CL_m] = FastLocalPolyAnal(data_multi, method);
% [CZ_m, Z_m, freq_m, G_m, CvecG_m, dof_m, CL_m] = ArbLocalPolyAnal(data_multi, method);

% FRF and its variance
G_multi_tran = squeeze(G_m).';

%% no transient removal
method.order        =   2; %order of the local polynomial approximation (default 2) 
method.dof          =   1; %degrees of freedom of the (co-)variance estimates = equivalent number of 
%                                               independent experiments - 1 (default ny) 
method.transient    = 	0;%determines the estimation of the transient term (optional; default 1)  

% [CZ_m, Z_m, freq_m, G_m, CvecG_m, dof_m, CL_m] = FastLocalPolyAnal(data_multi, method);
[CZ_m, Z_m, freq_m, G_m, CvecG_m, dof_m, CL_m] = ArbLocalPolyAnal(data_multi, method);

% FRF and its variance
G_multi_notran = squeeze(G_m).';

%% plots
figure; hold on
plot(f(lines),db(G0(lines)),'d')
plot(f(lines),db(G_multi_tran(lines-1)))
plot(f(lines),db(G_multi_notran(lines-1)))
plot(f(lines),db(G0(lines)-G_multi_tran(lines-1)))
plot(f(lines),db(G0(lines)-G_multi_notran(lines-1)))

legend('G_0','\hat{G} trans. est.','\hat{G} without trans. est.','resid \hat{G} trans. est.','resid \hat{G} without trans. est.')
%%
figure; hold on
semilogx(f(lines),db(G0(lines)),'d')
semilogx(f(lines),db(G_multi_tran(lines-1)))
semiplot(f(lines),db(G_multi_notran(lines-1)))
plot(f(lines),db(G0(lines)-G_multi_tran(lines-1)))
plot(f(lines),db(G0(lines)-G_multi_notran(lines-1)))
